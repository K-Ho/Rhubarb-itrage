"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("lodash");
var bintrees_1 = require("bintrees");
var utils_1 = require("../utils/utils");
var interval_utils_1 = require("../utils/interval_utils");
var types_1 = require("../types");
var DEFAULT_EXPIRATION_MARGIN_MS = 0;
var DEFAULT_ORDER_EXPIRATION_CHECKING_INTERVAL_MS = 50;
/**
 * This class includes the functionality to detect expired orders.
 * It stores them in a min heap by expiration time and checks for expired ones every `orderExpirationCheckingIntervalMs`
 */
var ExpirationWatcher = /** @class */ (function () {
    function ExpirationWatcher(expirationMarginIfExistsMs, orderExpirationCheckingIntervalIfExistsMs) {
        var _this = this;
        this.expiration = {};
        this.expirationMarginMs = expirationMarginIfExistsMs ||
            DEFAULT_EXPIRATION_MARGIN_MS;
        this.orderExpirationCheckingIntervalMs = expirationMarginIfExistsMs ||
            DEFAULT_ORDER_EXPIRATION_CHECKING_INTERVAL_MS;
        var scoreFunction = function (orderHash) { return _this.expiration[orderHash].toNumber(); };
        var comparator = function (lhs, rhs) { return scoreFunction(lhs) - scoreFunction(rhs); };
        this.orderHashByExpirationRBTree = new bintrees_1.RBTree(comparator);
    }
    ExpirationWatcher.prototype.subscribe = function (callbackAsync) {
        if (!_.isUndefined(this.orderExpirationCheckingIntervalIdIfExists)) {
            throw new Error(types_1.ZeroExError.SubscriptionAlreadyPresent);
        }
        this.orderExpirationCheckingIntervalIdIfExists = interval_utils_1.intervalUtils.setAsyncExcludingInterval(this.pruneExpiredOrdersAsync.bind(this, callbackAsync), this.orderExpirationCheckingIntervalMs);
    };
    ExpirationWatcher.prototype.unsubscribe = function () {
        if (_.isUndefined(this.orderExpirationCheckingIntervalIdIfExists)) {
            throw new Error(types_1.ZeroExError.SubscriptionNotFound);
        }
        interval_utils_1.intervalUtils.clearAsyncExcludingInterval(this.orderExpirationCheckingIntervalIdIfExists);
        delete this.orderExpirationCheckingIntervalIdIfExists;
    };
    ExpirationWatcher.prototype.addOrder = function (orderHash, expirationUnixTimestampMs) {
        this.expiration[orderHash] = expirationUnixTimestampMs;
        this.orderHashByExpirationRBTree.insert(orderHash);
    };
    ExpirationWatcher.prototype.removeOrder = function (orderHash) {
        this.orderHashByExpirationRBTree.remove(orderHash);
        delete this.expiration[orderHash];
    };
    ExpirationWatcher.prototype.pruneExpiredOrdersAsync = function (callbackAsync) {
        return __awaiter(this, void 0, void 0, function () {
            var currentUnixTimestampMs, hasTrakedOrders, nextOrderHashToExpire, hasNoExpiredOrders, isSubscriptionActive, orderHash;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        currentUnixTimestampMs = utils_1.utils.getCurrentUnixTimestampMs();
                        _a.label = 1;
                    case 1:
                        if (!true) return [3 /*break*/, 3];
                        hasTrakedOrders = this.orderHashByExpirationRBTree.size === 0;
                        if (hasTrakedOrders) {
                            return [3 /*break*/, 3];
                        }
                        nextOrderHashToExpire = this.orderHashByExpirationRBTree.min();
                        hasNoExpiredOrders = this.expiration[nextOrderHashToExpire].greaterThan(currentUnixTimestampMs.plus(this.expirationMarginMs));
                        isSubscriptionActive = _.isUndefined(this.orderExpirationCheckingIntervalIdIfExists);
                        if (hasNoExpiredOrders || isSubscriptionActive) {
                            return [3 /*break*/, 3];
                        }
                        orderHash = this.orderHashByExpirationRBTree.min();
                        this.orderHashByExpirationRBTree.remove(orderHash);
                        delete this.expiration[orderHash];
                        return [4 /*yield*/, callbackAsync(orderHash)];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 1];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    return ExpirationWatcher;
}());
exports.ExpirationWatcher = ExpirationWatcher;
//# sourceMappingURL=expiration_watcher.js.map