"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
require("mocha");
var _ = require("lodash");
var chai = require("chai");
var Sinon = require("sinon");
var chai_setup_1 = require("./utils/chai_setup");
var bignumber_js_1 = require("bignumber.js");
var web3_factory_1 = require("./utils/web3_factory");
var src_1 = require("../src");
var blockchain_lifecycle_1 = require("./utils/blockchain_lifecycle");
var token_utils_1 = require("./utils/token_utils");
chai_setup_1.chaiSetup.configure();
var expect = chai.expect;
var blockchainLifecycle = new blockchain_lifecycle_1.BlockchainLifecycle();
describe('SubscriptionTest', function () {
    var web3;
    var zeroEx;
    var userAddresses;
    var tokens;
    var tokenUtils;
    var coinbase;
    var addressWithoutFunds;
    before(function () { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    web3 = web3_factory_1.web3Factory.create();
                    zeroEx = new src_1.ZeroEx(web3.currentProvider);
                    return [4 /*yield*/, zeroEx.getAvailableAddressesAsync()];
                case 1:
                    userAddresses = _a.sent();
                    return [4 /*yield*/, zeroEx.tokenRegistry.getTokensAsync()];
                case 2:
                    tokens = _a.sent();
                    tokenUtils = new token_utils_1.TokenUtils(tokens);
                    coinbase = userAddresses[0];
                    addressWithoutFunds = userAddresses[1];
                    return [2 /*return*/];
            }
        });
    }); });
    beforeEach(function () { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, blockchainLifecycle.startAsync()];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    afterEach(function () { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, blockchainLifecycle.revertAsync()];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    describe('#subscribe', function () {
        var indexFilterValues = {};
        var shouldThrowOnInsufficientBalanceOrAllowance = true;
        var tokenAddress;
        var transferAmount = new bignumber_js_1.default(42);
        var allowanceAmount = new bignumber_js_1.default(42);
        var stubs = [];
        before(function () {
            var token = tokens[0];
            tokenAddress = token.address;
        });
        afterEach(function () {
            zeroEx.token.unsubscribeAll();
            _.each(stubs, function (s) { return s.restore(); });
            stubs = [];
        });
        it('Should receive the Error when an error occurs', function (done) {
            (function () { return __awaiter(_this, void 0, void 0, function () {
                var callback;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            callback = function (err, logEvent) {
                                expect(err).to.not.be.null();
                                expect(logEvent).to.be.undefined();
                                done();
                            };
                            stubs = [
                                Sinon.stub(zeroEx._web3Wrapper, 'getBlockAsync')
                                    .throws('JSON RPC error'),
                            ];
                            zeroEx.token.subscribe(tokenAddress, src_1.TokenEvents.Approval, indexFilterValues, callback);
                            return [4 /*yield*/, zeroEx.token.setAllowanceAsync(tokenAddress, coinbase, addressWithoutFunds, allowanceAmount)];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); })().catch(done);
        });
        it('Should allow unsubscribeAll to be called successfully after an error', function (done) {
            (function () { return __awaiter(_this, void 0, void 0, function () {
                var callback;
                return __generator(this, function (_a) {
                    callback = function (err, logEvent) { return _.noop; };
                    zeroEx.token.subscribe(tokenAddress, src_1.TokenEvents.Approval, indexFilterValues, callback);
                    stubs = [
                        Sinon.stub(zeroEx._web3Wrapper, 'getBlockAsync')
                            .throws('JSON RPC error'),
                    ];
                    zeroEx.token.unsubscribeAll();
                    done();
                    return [2 /*return*/];
                });
            }); })().catch(done);
        });
    });
});
//# sourceMappingURL=subscription_test.js.map